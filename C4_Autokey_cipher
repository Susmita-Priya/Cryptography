def Autokey_encrypt(plaintext, key,k):
    ciphertxt = ""

    c=0
    for i in range(len(plaintext)):
        char = plaintext[i]
        keys= k[c]
        
        if (i==0):
            if (char.isupper()):
                ciphertxt += chr((((ord(char) - 65) + key) % 26) + 65)
            
            else:
                ciphertxt += chr(((((ord(char) - 97) + key) % 26) + 97)-32)

        # "space" remains on the cipher text.
        elif (char == ' '):
            ciphertxt += char
       
    # key-65 because it is upper case
        elif (char.isupper()):
            ciphertxt += chr(((ord(char) - 65) + (ord(keys) - 65)) % 26 + 65)
            c=c+1
            
       #have to show in captital letter(-32)
        else:
            ciphertxt += chr((((ord(char) - 97) + (ord(keys) - 65)) % 26 + 97)-32)
            c=c+1

    return ciphertxt



def Autokey_decrypt(ciphertext, key,k):
    
    plaintxt = ""

    c=0
    for i in range(len(ciphertext)):
        char = ciphertext[i]
        keys= k[c]
        
        if (i==0):
            if (char.isupper()):
                plaintxt += chr(((((ord(char) - 65) - key) % 26) + 65)+32)
            
            else:
                plaintxt += chr((((ord(char) - 97) - key) % 26) + 97)
                
        elif char == ' ':
            plaintxt += char
       
    # convert lower case(+32)
        elif char.isupper():
            plaintxt += chr(((((ord(char) - 65) - (ord(keys) - 65)) % 26) + 65) +32)
            c=c+1
            
        else:
            plaintxt += chr((((ord(char) - 97) - (ord(keys) - 65)) % 26) + 97)
            c=c+1
            
    return plaintxt


message = input("Enter the plaintext : ")
key = int(input("Enter the key : "))
keystream = (message.upper()).replace(" ", "")
print()

encrypted_message = Autokey_encrypt(message, key,keystream)
print("Encrypted message:", encrypted_message)

decrypted_message = Autokey_decrypt(encrypted_message, key,keystream)
print("Decrypted message:", decrypted_message)
