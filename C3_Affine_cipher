def Affine_encrypt(plaintext, key1, key2):
    ciphertxt = ""

    for i in range(len(plaintext)):
        char = plaintext[i]

        # "space" remains on the cipher text.
        if (char == ' '):
            ciphertxt += char
       
        elif (char.isupper()):
            ciphertxt += chr(((((ord(char)-65)*key1) + key2) % 26) + 65)
            
       #have to show in captital letter(-32)
        else:
            ciphertxt += chr((((((ord(char)-97)*key1) + key2) % 26) + 97)-32)

    return ciphertxt



def Affine_decrypt(ciphertext, key1, key2):
    
    inv_key = pow(key1,-1,26)
    
    plaintxt = ""

    for i in range(len(ciphertext)):
        char = ciphertext[i]
       
        if char == ' ':
            plaintxt += char
       
    # convert lower case(+32)
        elif char.isupper():
            plaintxt += chr((((((ord(char)-65)-key2)*inv_key) % 26) + 65) +32)
            
        else:
            plaintxt += chr(((((ord(char)-97)-key2)*inv_key) % 26) + 97)
    return plaintxt


message = input("Enter the plaintext : ")
k1 = int(input("Enter the key1 : "))
k2 = int(input("Enter the key2 : "))
print()

encrypted_message = Affine_encrypt(message, k1, k2)
print("Encrypted message:", encrypted_message)

decrypted_message = Affine_decrypt(encrypted_message, k1, k2)
print("Decrypted message:", decrypted_message)
